
if(DEFINED ENV{VCPKG_ROOT})
    if(WIN32)
        set(VCPKG_TARGET_TRIPLET "x64-windows")
    elseif(APPLE)
        set(VCPKG_INSTALL_OPTIONS "--allow-unsupported")
    endif()
    # set(VCPKG_TARGET_TRIPLET "x64-osx" CACHE STRING "")
    string(REPLACE "\\" "/" VCPKG_ROOT $ENV{VCPKG_ROOT})
    set(CMAKE_TOOLCHAIN_FILE "${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake")
else()
    message(FATAL_ERROR "NOT FIND ENVIRONMENT VARIABLE VCPKG_ROOT")
endif()

cmake_minimum_required(VERSION 3.22)

project(AsyncHttp VERSION 0.1 LANGUAGES CXX)

if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
endif(MSVC)

if(WIN32)
    add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
    add_definitions(-D_WIN32_WINNT=0x0601)
endif(WIN32)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON CACHE BOOL "ON" FORCE)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "CMakeTargets")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Binaries)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Binaries)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Binaries)

foreach(CONFIGURATION_TYPE ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${CONFIGURATION_TYPE} CONFIGURATION_TYPE_TOUPPER)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE_TOUPPER} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIGURATION_TYPE})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE_TOUPPER} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${CONFIGURATION_TYPE})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE_TOUPPER} ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/${CONFIGURATION_TYPE})
endforeach(CONFIGURATION_TYPE CMAKE_CONFIGURATION_TYPES)

add_subdirectory(Source)
